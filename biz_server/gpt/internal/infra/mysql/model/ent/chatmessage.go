// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"msp/biz_server/gpt/internal/infra/mysql/model/ent/chatmessage"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChatMessage is the model entity for the ChatMessage schema.
type ChatMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID int32 `json:"chat_id,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Version holds the value of the "version" field.
	Version      int8 `json:"version,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatmessage.FieldID, chatmessage.FieldChatID, chatmessage.FieldVersion:
			values[i] = new(sql.NullInt64)
		case chatmessage.FieldRequestID, chatmessage.FieldText:
			values[i] = new(sql.NullString)
		case chatmessage.FieldCreatedAt, chatmessage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatMessage fields.
func (cm *ChatMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int32(value.Int64)
		case chatmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cm.CreatedAt = value.Time
			}
		case chatmessage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cm.UpdatedAt = value.Time
			}
		case chatmessage.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				cm.ChatID = int32(value.Int64)
			}
		case chatmessage.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				cm.RequestID = value.String
			}
		case chatmessage.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				cm.Text = value.String
			}
		case chatmessage.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				cm.Version = int8(value.Int64)
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatMessage.
// This includes values selected through modifiers, order, etc.
func (cm *ChatMessage) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// Update returns a builder for updating this ChatMessage.
// Note that you need to call ChatMessage.Unwrap() before calling this method if this ChatMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *ChatMessage) Update() *ChatMessageUpdateOne {
	return NewChatMessageClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the ChatMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *ChatMessage) Unwrap() *ChatMessage {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatMessage is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *ChatMessage) String() string {
	var builder strings.Builder
	builder.WriteString("ChatMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", cm.ChatID))
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(cm.RequestID)
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(cm.Text)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", cm.Version))
	builder.WriteByte(')')
	return builder.String()
}

// ChatMessages is a parsable slice of ChatMessage.
type ChatMessages []*ChatMessage
