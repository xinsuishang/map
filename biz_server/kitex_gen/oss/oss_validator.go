// Code generated by Validator v0.2.3. DO NOT EDIT.

package oss

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *WeightUploadRequest) IsValid() error {
	if p.Weight <= float64(0) {
		return fmt.Errorf("field Weight gt rule failed, current value: %v", p.Weight)
	}
	if p.Weight >= float64(200) {
		return fmt.Errorf("field Weight lt rule failed, current value: %v", p.Weight)
	}
	if len(p.FileName) < int(5) {
		return fmt.Errorf("field FileName min_len rule failed, current value: %d", len(p.FileName))
	}
	if len(p.FileName) > int(100) {
		return fmt.Errorf("field FileName max_len rule failed, current value: %d", len(p.FileName))
	}
	_src := ".JPG"
	if !strings.HasSuffix(p.FileName, _src) {
		return fmt.Errorf("field FileName suffix rule failed, current value: %v", p.FileName)
	}
	if len(p.RemoteName) < int(5) {
		return fmt.Errorf("field RemoteName min_len rule failed, current value: %d", len(p.RemoteName))
	}
	if len(p.RemoteName) > int(100) {
		return fmt.Errorf("field RemoteName max_len rule failed, current value: %d", len(p.RemoteName))
	}
	_src1 := ".JPG"
	if !strings.HasSuffix(p.RemoteName, _src1) {
		return fmt.Errorf("field RemoteName suffix rule failed, current value: %v", p.RemoteName)
	}
	if len(p.Title) < int(1) {
		return fmt.Errorf("field Title min_len rule failed, current value: %d", len(p.Title))
	}
	if len(p.Title) > int(100) {
		return fmt.Errorf("field Title max_len rule failed, current value: %d", len(p.Title))
	}
	if len(p.DateTime) < int(10) {
		return fmt.Errorf("field DateTime min_len rule failed, current value: %d", len(p.DateTime))
	}
	if len(p.DateTime) > int(10) {
		return fmt.Errorf("field DateTime max_len rule failed, current value: %d", len(p.DateTime))
	}
	return nil
}
func (p *NotionUploadRequest) IsValid() error {
	if p.DomainId <= int32(0) {
		return fmt.Errorf("field DomainId gt rule failed, current value: %v", p.DomainId)
	}
	if len(p.DateTime) < int(10) {
		return fmt.Errorf("field DateTime min_len rule failed, current value: %d", len(p.DateTime))
	}
	if len(p.DateTime) > int(10) {
		return fmt.Errorf("field DateTime max_len rule failed, current value: %d", len(p.DateTime))
	}
	if p.Weight <= float64(0) {
		return fmt.Errorf("field Weight gt rule failed, current value: %v", p.Weight)
	}
	if p.Weight >= float64(200) {
		return fmt.Errorf("field Weight lt rule failed, current value: %v", p.Weight)
	}
	if len(p.FileUrl) < int(1) {
		return fmt.Errorf("field FileUrl min_len rule failed, current value: %d", len(p.FileUrl))
	}
	if len(p.FileUrl) > int(100) {
		return fmt.Errorf("field FileUrl max_len rule failed, current value: %d", len(p.FileUrl))
	}
	if len(p.Title) < int(1) {
		return fmt.Errorf("field Title min_len rule failed, current value: %d", len(p.Title))
	}
	if len(p.Title) > int(100) {
		return fmt.Errorf("field Title max_len rule failed, current value: %d", len(p.Title))
	}
	return nil
}
func (p *UploadRequest) IsValid() error {
	if p.DomainId <= int32(0) {
		return fmt.Errorf("field DomainId gt rule failed, current value: %v", p.DomainId)
	}
	if len(p.FileName) < int(5) {
		return fmt.Errorf("field FileName min_len rule failed, current value: %d", len(p.FileName))
	}
	if len(p.FileName) > int(100) {
		return fmt.Errorf("field FileName max_len rule failed, current value: %d", len(p.FileName))
	}
	_src := ".JPG"
	if !strings.HasSuffix(p.FileName, _src) {
		return fmt.Errorf("field FileName suffix rule failed, current value: %v", p.FileName)
	}
	if len(p.RemoteName) < int(5) {
		return fmt.Errorf("field RemoteName min_len rule failed, current value: %d", len(p.RemoteName))
	}
	if len(p.RemoteName) > int(100) {
		return fmt.Errorf("field RemoteName max_len rule failed, current value: %d", len(p.RemoteName))
	}
	_src1 := ".JPG"
	if !strings.HasSuffix(p.RemoteName, _src1) {
		return fmt.Errorf("field RemoteName suffix rule failed, current value: %v", p.RemoteName)
	}
	if len(p.RemoteDir) < int(1) {
		return fmt.Errorf("field RemoteDir min_len rule failed, current value: %d", len(p.RemoteDir))
	}
	if len(p.RemoteDir) > int(300) {
		return fmt.Errorf("field RemoteDir max_len rule failed, current value: %d", len(p.RemoteDir))
	}
	return nil
}
func (p *OssUploadResp) IsValid() error {
	return nil
}
