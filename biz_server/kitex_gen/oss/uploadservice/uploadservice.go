// Code generated by Kitex v0.10.1. DO NOT EDIT.

package uploadservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	common "msp/biz_server/kitex_gen/common"
	oss "msp/biz_server/kitex_gen/oss"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"OssUpload": kitex.NewMethodInfo(
		ossUploadHandler,
		newUploadServiceOssUploadArgs,
		newUploadServiceOssUploadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"NotionUpload": kitex.NewMethodInfo(
		notionUploadHandler,
		newUploadServiceNotionUploadArgs,
		newUploadServiceNotionUploadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"WeightUpload": kitex.NewMethodInfo(
		weightUploadHandler,
		newUploadServiceWeightUploadArgs,
		newUploadServiceWeightUploadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	uploadServiceServiceInfo                = NewServiceInfo()
	uploadServiceServiceInfoForClient       = NewServiceInfoForClient()
	uploadServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return uploadServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return uploadServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return uploadServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UploadService"
	handlerType := (*oss.UploadService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "oss",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.1",
		Extra:           extra,
	}
	return svcInfo
}

func ossUploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*oss.UploadServiceOssUploadArgs)
	realResult := result.(*oss.UploadServiceOssUploadResult)
	success, err := handler.(oss.UploadService).OssUpload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUploadServiceOssUploadArgs() interface{} {
	return oss.NewUploadServiceOssUploadArgs()
}

func newUploadServiceOssUploadResult() interface{} {
	return oss.NewUploadServiceOssUploadResult()
}

func notionUploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*oss.UploadServiceNotionUploadArgs)
	realResult := result.(*oss.UploadServiceNotionUploadResult)
	success, err := handler.(oss.UploadService).NotionUpload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUploadServiceNotionUploadArgs() interface{} {
	return oss.NewUploadServiceNotionUploadArgs()
}

func newUploadServiceNotionUploadResult() interface{} {
	return oss.NewUploadServiceNotionUploadResult()
}

func weightUploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*oss.UploadServiceWeightUploadArgs)
	realResult := result.(*oss.UploadServiceWeightUploadResult)
	success, err := handler.(oss.UploadService).WeightUpload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUploadServiceWeightUploadArgs() interface{} {
	return oss.NewUploadServiceWeightUploadArgs()
}

func newUploadServiceWeightUploadResult() interface{} {
	return oss.NewUploadServiceWeightUploadResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) OssUpload(ctx context.Context, req *oss.UploadRequest) (r *oss.OssUploadResp, err error) {
	var _args oss.UploadServiceOssUploadArgs
	_args.Req = req
	var _result oss.UploadServiceOssUploadResult
	if err = p.c.Call(ctx, "OssUpload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) NotionUpload(ctx context.Context, req *oss.NotionUploadRequest) (r *common.EmptyResponse, err error) {
	var _args oss.UploadServiceNotionUploadArgs
	_args.Req = req
	var _result oss.UploadServiceNotionUploadResult
	if err = p.c.Call(ctx, "NotionUpload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) WeightUpload(ctx context.Context, req *oss.WeightUploadRequest) (r *common.EmptyResponse, err error) {
	var _args oss.UploadServiceWeightUploadArgs
	_args.Req = req
	var _result oss.UploadServiceWeightUploadResult
	if err = p.c.Call(ctx, "WeightUpload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
