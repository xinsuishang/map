// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"msp/biz_server/oss/internal/infra/mysql/model/ent/domainmapping"
	"msp/biz_server/oss/internal/infra/mysql/model/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DomainMappingDelete is the builder for deleting a DomainMapping entity.
type DomainMappingDelete struct {
	config
	hooks    []Hook
	mutation *DomainMappingMutation
}

// Where appends a list predicates to the DomainMappingDelete builder.
func (dmd *DomainMappingDelete) Where(ps ...predicate.DomainMapping) *DomainMappingDelete {
	dmd.mutation.Where(ps...)
	return dmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dmd *DomainMappingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dmd.sqlExec, dmd.mutation, dmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dmd *DomainMappingDelete) ExecX(ctx context.Context) int {
	n, err := dmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dmd *DomainMappingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(domainmapping.Table, sqlgraph.NewFieldSpec(domainmapping.FieldID, field.TypeInt32))
	if ps := dmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dmd.mutation.done = true
	return affected, err
}

// DomainMappingDeleteOne is the builder for deleting a single DomainMapping entity.
type DomainMappingDeleteOne struct {
	dmd *DomainMappingDelete
}

// Where appends a list predicates to the DomainMappingDelete builder.
func (dmdo *DomainMappingDeleteOne) Where(ps ...predicate.DomainMapping) *DomainMappingDeleteOne {
	dmdo.dmd.mutation.Where(ps...)
	return dmdo
}

// Exec executes the deletion query.
func (dmdo *DomainMappingDeleteOne) Exec(ctx context.Context) error {
	n, err := dmdo.dmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{domainmapping.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dmdo *DomainMappingDeleteOne) ExecX(ctx context.Context) {
	if err := dmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
