// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"msp/biz_server/oss/internal/infra/mysql/model/ent/domainmapping"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DomainMappingCreate is the builder for creating a DomainMapping entity.
type DomainMappingCreate struct {
	config
	mutation *DomainMappingMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dmc *DomainMappingCreate) SetCreatedAt(t time.Time) *DomainMappingCreate {
	dmc.mutation.SetCreatedAt(t)
	return dmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dmc *DomainMappingCreate) SetNillableCreatedAt(t *time.Time) *DomainMappingCreate {
	if t != nil {
		dmc.SetCreatedAt(*t)
	}
	return dmc
}

// SetUpdatedAt sets the "updated_at" field.
func (dmc *DomainMappingCreate) SetUpdatedAt(t time.Time) *DomainMappingCreate {
	dmc.mutation.SetUpdatedAt(t)
	return dmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dmc *DomainMappingCreate) SetNillableUpdatedAt(t *time.Time) *DomainMappingCreate {
	if t != nil {
		dmc.SetUpdatedAt(*t)
	}
	return dmc
}

// SetTenantID sets the "tenant_id" field.
func (dmc *DomainMappingCreate) SetTenantID(i int) *DomainMappingCreate {
	dmc.mutation.SetTenantID(i)
	return dmc
}

// SetRegionID sets the "region_id" field.
func (dmc *DomainMappingCreate) SetRegionID(s string) *DomainMappingCreate {
	dmc.mutation.SetRegionID(s)
	return dmc
}

// SetDomain sets the "domain" field.
func (dmc *DomainMappingCreate) SetDomain(s string) *DomainMappingCreate {
	dmc.mutation.SetDomain(s)
	return dmc
}

// SetBucketName sets the "bucket_name" field.
func (dmc *DomainMappingCreate) SetBucketName(s string) *DomainMappingCreate {
	dmc.mutation.SetBucketName(s)
	return dmc
}

// SetDesc sets the "desc" field.
func (dmc *DomainMappingCreate) SetDesc(s string) *DomainMappingCreate {
	dmc.mutation.SetDesc(s)
	return dmc
}

// Mutation returns the DomainMappingMutation object of the builder.
func (dmc *DomainMappingCreate) Mutation() *DomainMappingMutation {
	return dmc.mutation
}

// Save creates the DomainMapping in the database.
func (dmc *DomainMappingCreate) Save(ctx context.Context) (*DomainMapping, error) {
	dmc.defaults()
	return withHooks(ctx, dmc.sqlSave, dmc.mutation, dmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dmc *DomainMappingCreate) SaveX(ctx context.Context) *DomainMapping {
	v, err := dmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmc *DomainMappingCreate) Exec(ctx context.Context) error {
	_, err := dmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmc *DomainMappingCreate) ExecX(ctx context.Context) {
	if err := dmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmc *DomainMappingCreate) defaults() {
	if _, ok := dmc.mutation.CreatedAt(); !ok {
		v := domainmapping.DefaultCreatedAt()
		dmc.mutation.SetCreatedAt(v)
	}
	if _, ok := dmc.mutation.UpdatedAt(); !ok {
		v := domainmapping.DefaultUpdatedAt()
		dmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmc *DomainMappingCreate) check() error {
	if _, ok := dmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DomainMapping.created_at"`)}
	}
	if _, ok := dmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DomainMapping.updated_at"`)}
	}
	if _, ok := dmc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DomainMapping.tenant_id"`)}
	}
	if _, ok := dmc.mutation.RegionID(); !ok {
		return &ValidationError{Name: "region_id", err: errors.New(`ent: missing required field "DomainMapping.region_id"`)}
	}
	if _, ok := dmc.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "DomainMapping.domain"`)}
	}
	if _, ok := dmc.mutation.BucketName(); !ok {
		return &ValidationError{Name: "bucket_name", err: errors.New(`ent: missing required field "DomainMapping.bucket_name"`)}
	}
	if _, ok := dmc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "DomainMapping.desc"`)}
	}
	return nil
}

func (dmc *DomainMappingCreate) sqlSave(ctx context.Context) (*DomainMapping, error) {
	if err := dmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dmc.mutation.id = &_node.ID
	dmc.mutation.done = true
	return _node, nil
}

func (dmc *DomainMappingCreate) createSpec() (*DomainMapping, *sqlgraph.CreateSpec) {
	var (
		_node = &DomainMapping{config: dmc.config}
		_spec = sqlgraph.NewCreateSpec(domainmapping.Table, sqlgraph.NewFieldSpec(domainmapping.FieldID, field.TypeInt))
	)
	if value, ok := dmc.mutation.CreatedAt(); ok {
		_spec.SetField(domainmapping.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dmc.mutation.UpdatedAt(); ok {
		_spec.SetField(domainmapping.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dmc.mutation.TenantID(); ok {
		_spec.SetField(domainmapping.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := dmc.mutation.RegionID(); ok {
		_spec.SetField(domainmapping.FieldRegionID, field.TypeString, value)
		_node.RegionID = value
	}
	if value, ok := dmc.mutation.Domain(); ok {
		_spec.SetField(domainmapping.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := dmc.mutation.BucketName(); ok {
		_spec.SetField(domainmapping.FieldBucketName, field.TypeString, value)
		_node.BucketName = value
	}
	if value, ok := dmc.mutation.Desc(); ok {
		_spec.SetField(domainmapping.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	return _node, _spec
}

// DomainMappingCreateBulk is the builder for creating many DomainMapping entities in bulk.
type DomainMappingCreateBulk struct {
	config
	err      error
	builders []*DomainMappingCreate
}

// Save creates the DomainMapping entities in the database.
func (dmcb *DomainMappingCreateBulk) Save(ctx context.Context) ([]*DomainMapping, error) {
	if dmcb.err != nil {
		return nil, dmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dmcb.builders))
	nodes := make([]*DomainMapping, len(dmcb.builders))
	mutators := make([]Mutator, len(dmcb.builders))
	for i := range dmcb.builders {
		func(i int, root context.Context) {
			builder := dmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DomainMappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dmcb *DomainMappingCreateBulk) SaveX(ctx context.Context) []*DomainMapping {
	v, err := dmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmcb *DomainMappingCreateBulk) Exec(ctx context.Context) error {
	_, err := dmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmcb *DomainMappingCreateBulk) ExecX(ctx context.Context) {
	if err := dmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
