// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"msp/biz_server/oss/internal/infra/mysql/model/ent/domainmapping"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DomainMapping is the model entity for the DomainMapping schema.
type DomainMapping struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// RegionID holds the value of the "region_id" field.
	RegionID string `json:"region_id,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// BucketName holds the value of the "bucket_name" field.
	BucketName string `json:"bucket_name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc         string `json:"desc,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DomainMapping) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case domainmapping.FieldID, domainmapping.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case domainmapping.FieldRegionID, domainmapping.FieldDomain, domainmapping.FieldBucketName, domainmapping.FieldDesc:
			values[i] = new(sql.NullString)
		case domainmapping.FieldCreatedAt, domainmapping.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DomainMapping fields.
func (dm *DomainMapping) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case domainmapping.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dm.ID = int(value.Int64)
		case domainmapping.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dm.CreatedAt = value.Time
			}
		case domainmapping.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dm.UpdatedAt = value.Time
			}
		case domainmapping.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				dm.TenantID = int(value.Int64)
			}
		case domainmapping.FieldRegionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region_id", values[i])
			} else if value.Valid {
				dm.RegionID = value.String
			}
		case domainmapping.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				dm.Domain = value.String
			}
		case domainmapping.FieldBucketName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket_name", values[i])
			} else if value.Valid {
				dm.BucketName = value.String
			}
		case domainmapping.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				dm.Desc = value.String
			}
		default:
			dm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DomainMapping.
// This includes values selected through modifiers, order, etc.
func (dm *DomainMapping) Value(name string) (ent.Value, error) {
	return dm.selectValues.Get(name)
}

// Update returns a builder for updating this DomainMapping.
// Note that you need to call DomainMapping.Unwrap() before calling this method if this DomainMapping
// was returned from a transaction, and the transaction was committed or rolled back.
func (dm *DomainMapping) Update() *DomainMappingUpdateOne {
	return NewDomainMappingClient(dm.config).UpdateOne(dm)
}

// Unwrap unwraps the DomainMapping entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dm *DomainMapping) Unwrap() *DomainMapping {
	_tx, ok := dm.config.driver.(*txDriver)
	if !ok {
		panic("ent: DomainMapping is not a transactional entity")
	}
	dm.config.driver = _tx.drv
	return dm
}

// String implements the fmt.Stringer.
func (dm *DomainMapping) String() string {
	var builder strings.Builder
	builder.WriteString("DomainMapping(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(dm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", dm.TenantID))
	builder.WriteString(", ")
	builder.WriteString("region_id=")
	builder.WriteString(dm.RegionID)
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(dm.Domain)
	builder.WriteString(", ")
	builder.WriteString("bucket_name=")
	builder.WriteString(dm.BucketName)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(dm.Desc)
	builder.WriteByte(')')
	return builder.String()
}

// DomainMappings is a parsable slice of DomainMapping.
type DomainMappings []*DomainMapping
